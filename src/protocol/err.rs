use std::collections::HashMap;
use std::io::{Error, ErrorKind, Read, Write};
use bytes::{Bytes, BytesMut};
use phf::phf_map;
use kafka_encode::{KafkaDecodable, KafkaEncodable};

#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ErrorCode {
    UnknownServerError = -1,
    None = 0,
    OffsetOutOfRange = 1,
    CorruptMessage = 2,
    UnknownTopicOrPartition = 3,
    InvalidFetchSize = 4,
    LeaderNotAvailable = 5,
    NotLeaderOrFollower = 6,
    RequestTimedOut = 7,
    BrokerNotAvailable = 8,
    ReplicaNotAvailable = 9,
    MessageTooLarge = 10,
    StaleControllerEpoch = 11,
    OffsetMetadataTooLarge = 12,
    NetworkException = 13,
    CoordinatorLoadInProgress = 14,
    CoordinatorNotAvailable = 15,
    NotCoordinator = 16,
    InvalidTopicException = 17,
    RecordListTooLarge = 18,
    NotEnoughReplicas = 19,
    NotEnoughReplicasAfterAppend = 20,
    InvalidRequiredAcks = 21,
    IllegalGeneration = 22,
    InconsistentGroupProtocol = 23,
    InvalidGroupId = 24,
    UnknownMemberId = 25,
    InvalidSessionTimeout = 26,
    RebalanceInProgress = 27,
    InvalidCommitOffsetSize = 28,
    TopicAuthorizationFailed = 29,
    GroupAuthorizationFailed = 30,
    ClusterAuthorizationFailed = 31,
    InvalidTimestamp = 32,
    UnsupportedSaslMechanism = 33,
    IllegalSaslState = 34,
    UnsupportedVersion = 35,
    TopicAlreadyExists = 36,
    InvalidPartitions = 37,
    InvalidReplicationFactor = 38,
    InvalidReplicaAssignment = 39,
    InvalidConfig = 40,
    NotController = 41,
    InvalidRequest = 42,
    UnsupportedForMessageFormat = 43,
    PolicyViolation = 44,
    OutOfOrderSequenceNumber = 45,
    DuplicateSequenceNumber = 46,
    InvalidProducerEpoch = 47,
    InvalidTxnState = 48,
    InvalidProducerIdMapping = 49,
    InvalidTransactionTimeout = 50,
    ConcurrentTransactions = 51,
    TransactionCoordinatorFenced = 52,
    TransactionalIdAuthorizationFailed = 53,
    SecurityDisabled = 54,
    OperationNotAttempted = 55,
    KafkaStorageError = 56,
    LogDirNotFound = 57,
    SaslAuthenticationFailed = 58,
    UnknownProducerId = 59,
    ReassignmentInProgress = 60,
    DelegationTokenAuthDisabled = 61,
    DelegationTokenNotFound = 62,
    DelegationTokenOwnerMismatch = 63,
    DelegationTokenRequestNotAllowed = 64,
    DelegationTokenAuthorizationFailed = 65,
    DelegationTokenExpired = 66,
    InvalidPrincipalType = 67,
    NonEmptyGroup = 68,
    GroupIdNotFound = 69,
    FetchSessionIdNotFound = 70,
    InvalidFetchSessionEpoch = 71,
    ListenerNotFound = 72,
    TopicDeletionDisabled = 73,
    FencedLeaderEpoch = 74,
    UnknownLeaderEpoch = 75,
    UnsupportedCompressionType = 76,
    StaleBrokerEpoch = 77,
    OffsetNotAvailable = 78,
    MemberIdRequired = 79,
    PreferredLeaderNotAvailable = 80,
    GroupMaxSizeReached = 81,
    FencedInstanceId = 82,
    EligibleLeadersNotAvailable = 83,
    ElectionNotNeeded = 84,
    NoReassignmentInProgress = 85,
    GroupSubscribedToTopic = 86,
    InvalidRecord = 87,
    UnstableOffsetCommit = 88,
    ThrottlingQuotaExceeded = 89,
    ProducerFenced = 90,
    ResourceNotFound = 91,
    DuplicateResource = 92,
    UnacceptableCredential = 93,
    InconsistentVoterSet = 94,
    InvalidUpdateVersion = 95,
    FeatureUpdateFailed = 96,
    PrincipalDeserializationFailure = 97,
    SnapshotNotFound = 98,
    PositionOutOfRange = 99,
    UnknownTopicId = 100,
    DuplicateBrokerRegistration = 101,
    BrokerIdNotRegistered = 102,
    InconsistentTopicId = 103,
    InconsistentClusterId = 104,
    TransactionalIdNotFound = 105,
    FetchSessionTopicIdError = 106,
    IneligibleReplica = 107,
    NewLeaderElected = 108,
}

impl TryFrom<i16> for ErrorCode {
    type Error = std::io::Error;

    fn try_from(value: i16) -> Result<Self, Self::Error> {
        match value {
            i if i == ErrorCode::UnknownServerError as i16 => Ok(ErrorCode::UnknownServerError),
            i if i == ErrorCode::None as i16 => Ok(ErrorCode::None),
            i if i == ErrorCode::OffsetOutOfRange as i16 => Ok(ErrorCode::OffsetOutOfRange),
            i if i == ErrorCode::CorruptMessage as i16 => Ok(ErrorCode::CorruptMessage),
            i if i == ErrorCode::UnknownTopicOrPartition as i16 => Ok(ErrorCode::UnknownTopicOrPartition),
            i if i == ErrorCode::InvalidFetchSize as i16 => Ok(ErrorCode::InvalidFetchSize),
            i if i == ErrorCode::LeaderNotAvailable as i16 => Ok(ErrorCode::LeaderNotAvailable),
            i if i == ErrorCode::NotLeaderOrFollower as i16 => Ok(ErrorCode::NotLeaderOrFollower),
            i if i == ErrorCode::RequestTimedOut as i16 => Ok(ErrorCode::RequestTimedOut),
            i if i == ErrorCode::BrokerNotAvailable as i16 => Ok(ErrorCode::BrokerNotAvailable),
            i if i == ErrorCode::ReplicaNotAvailable as i16 => Ok(ErrorCode::ReplicaNotAvailable),
            i if i == ErrorCode::MessageTooLarge as i16 => Ok(ErrorCode::MessageTooLarge),
            i if i == ErrorCode::StaleControllerEpoch as i16 => Ok(ErrorCode::StaleControllerEpoch),
            i if i == ErrorCode::OffsetMetadataTooLarge as i16 => Ok(ErrorCode::OffsetMetadataTooLarge),
            i if i == ErrorCode::NetworkException as i16 => Ok(ErrorCode::NetworkException),
            i if i == ErrorCode::CoordinatorLoadInProgress as i16 => Ok(ErrorCode::CoordinatorLoadInProgress),
            i if i == ErrorCode::CoordinatorNotAvailable as i16 => Ok(ErrorCode::CoordinatorNotAvailable),
            i if i == ErrorCode::NotCoordinator as i16 => Ok(ErrorCode::NotCoordinator),
            i if i == ErrorCode::InvalidTopicException as i16 => Ok(ErrorCode::InvalidTopicException),
            i if i == ErrorCode::RecordListTooLarge as i16 => Ok(ErrorCode::RecordListTooLarge),
            i if i == ErrorCode::NotEnoughReplicas as i16 => Ok(ErrorCode::NotEnoughReplicas),
            i if i == ErrorCode::NotEnoughReplicasAfterAppend as i16 => Ok(ErrorCode::NotEnoughReplicasAfterAppend),
            i if i == ErrorCode::InvalidRequiredAcks as i16 => Ok(ErrorCode::InvalidRequiredAcks),
            i if i == ErrorCode::IllegalGeneration as i16 => Ok(ErrorCode::IllegalGeneration),
            i if i == ErrorCode::InconsistentGroupProtocol as i16 => Ok(ErrorCode::InconsistentGroupProtocol),
            i if i == ErrorCode::InvalidGroupId as i16 => Ok(ErrorCode::InvalidGroupId),
            i if i == ErrorCode::UnknownMemberId as i16 => Ok(ErrorCode::UnknownMemberId),
            i if i == ErrorCode::InvalidSessionTimeout as i16 => Ok(ErrorCode::InvalidSessionTimeout),
            i if i == ErrorCode::RebalanceInProgress as i16 => Ok(ErrorCode::RebalanceInProgress),
            i if i == ErrorCode::InvalidCommitOffsetSize as i16 => Ok(ErrorCode::InvalidCommitOffsetSize),
            i if i == ErrorCode::TopicAuthorizationFailed as i16 => Ok(ErrorCode::TopicAuthorizationFailed),
            i if i == ErrorCode::GroupAuthorizationFailed as i16 => Ok(ErrorCode::GroupAuthorizationFailed),
            i if i == ErrorCode::ClusterAuthorizationFailed as i16 => Ok(ErrorCode::ClusterAuthorizationFailed),
            i if i == ErrorCode::InvalidTimestamp as i16 => Ok(ErrorCode::InvalidTimestamp),
            i if i == ErrorCode::UnsupportedSaslMechanism as i16 => Ok(ErrorCode::UnsupportedSaslMechanism),
            i if i == ErrorCode::IllegalSaslState as i16 => Ok(ErrorCode::IllegalSaslState),
            i if i == ErrorCode::UnsupportedVersion as i16 => Ok(ErrorCode::UnsupportedVersion),
            i if i == ErrorCode::TopicAlreadyExists as i16 => Ok(ErrorCode::TopicAlreadyExists),
            i if i == ErrorCode::InvalidPartitions as i16 => Ok(ErrorCode::InvalidPartitions),
            i if i == ErrorCode::InvalidReplicationFactor as i16 => Ok(ErrorCode::InvalidReplicationFactor),
            i if i == ErrorCode::InvalidReplicaAssignment as i16 => Ok(ErrorCode::InvalidReplicaAssignment),
            i if i == ErrorCode::InvalidConfig as i16 => Ok(ErrorCode::InvalidConfig),
            i if i == ErrorCode::NotController as i16 => Ok(ErrorCode::NotController),
            i if i == ErrorCode::InvalidRequest as i16 => Ok(ErrorCode::InvalidRequest),
            i if i == ErrorCode::UnsupportedForMessageFormat as i16 => Ok(ErrorCode::UnsupportedForMessageFormat),
            i if i == ErrorCode::PolicyViolation as i16 => Ok(ErrorCode::PolicyViolation),
            i if i == ErrorCode::OutOfOrderSequenceNumber as i16 => Ok(ErrorCode::OutOfOrderSequenceNumber),
            i if i == ErrorCode::DuplicateSequenceNumber as i16 => Ok(ErrorCode::DuplicateSequenceNumber),
            i if i == ErrorCode::InvalidProducerEpoch as i16 => Ok(ErrorCode::InvalidProducerEpoch),
            i if i == ErrorCode::InvalidTxnState as i16 => Ok(ErrorCode::InvalidTxnState),
            i if i == ErrorCode::InvalidProducerIdMapping as i16 => Ok(ErrorCode::InvalidProducerIdMapping),
            i if i == ErrorCode::InvalidTransactionTimeout as i16 => Ok(ErrorCode::InvalidTransactionTimeout),
            i if i == ErrorCode::ConcurrentTransactions as i16 => Ok(ErrorCode::ConcurrentTransactions),
            i if i == ErrorCode::TransactionCoordinatorFenced as i16 => Ok(ErrorCode::TransactionCoordinatorFenced),
            i if i == ErrorCode::TransactionalIdAuthorizationFailed as i16 => Ok(ErrorCode::TransactionalIdAuthorizationFailed),
            i if i == ErrorCode::SecurityDisabled as i16 => Ok(ErrorCode::SecurityDisabled),
            i if i == ErrorCode::OperationNotAttempted as i16 => Ok(ErrorCode::OperationNotAttempted),
            i if i == ErrorCode::KafkaStorageError as i16 => Ok(ErrorCode::KafkaStorageError),
            i if i == ErrorCode::LogDirNotFound as i16 => Ok(ErrorCode::LogDirNotFound),
            i if i == ErrorCode::SaslAuthenticationFailed as i16 => Ok(ErrorCode::SaslAuthenticationFailed),
            i if i == ErrorCode::UnknownProducerId as i16 => Ok(ErrorCode::UnknownProducerId),
            i if i == ErrorCode::ReassignmentInProgress as i16 => Ok(ErrorCode::ReassignmentInProgress),
            i if i == ErrorCode::DelegationTokenAuthDisabled as i16 => Ok(ErrorCode::DelegationTokenAuthDisabled),
            i if i == ErrorCode::DelegationTokenNotFound as i16 => Ok(ErrorCode::DelegationTokenNotFound),
            i if i == ErrorCode::DelegationTokenOwnerMismatch as i16 => Ok(ErrorCode::DelegationTokenOwnerMismatch),
            i if i == ErrorCode::DelegationTokenRequestNotAllowed as i16 => Ok(ErrorCode::DelegationTokenRequestNotAllowed),
            i if i == ErrorCode::DelegationTokenAuthorizationFailed as i16 => Ok(ErrorCode::DelegationTokenAuthorizationFailed),
            i if i == ErrorCode::DelegationTokenExpired as i16 => Ok(ErrorCode::DelegationTokenExpired),
            i if i == ErrorCode::InvalidPrincipalType as i16 => Ok(ErrorCode::InvalidPrincipalType),
            i if i == ErrorCode::NonEmptyGroup as i16 => Ok(ErrorCode::NonEmptyGroup),
            i if i == ErrorCode::GroupIdNotFound as i16 => Ok(ErrorCode::GroupIdNotFound),
            i if i == ErrorCode::FetchSessionIdNotFound as i16 => Ok(ErrorCode::FetchSessionIdNotFound),
            i if i == ErrorCode::InvalidFetchSessionEpoch as i16 => Ok(ErrorCode::InvalidFetchSessionEpoch),
            i if i == ErrorCode::ListenerNotFound as i16 => Ok(ErrorCode::ListenerNotFound),
            i if i == ErrorCode::TopicDeletionDisabled as i16 => Ok(ErrorCode::TopicDeletionDisabled),
            i if i == ErrorCode::FencedLeaderEpoch as i16 => Ok(ErrorCode::FencedLeaderEpoch),
            i if i == ErrorCode::UnknownLeaderEpoch as i16 => Ok(ErrorCode::UnknownLeaderEpoch),
            i if i == ErrorCode::UnsupportedCompressionType as i16 => Ok(ErrorCode::UnsupportedCompressionType),
            i if i == ErrorCode::StaleBrokerEpoch as i16 => Ok(ErrorCode::StaleBrokerEpoch),
            i if i == ErrorCode::OffsetNotAvailable as i16 => Ok(ErrorCode::OffsetNotAvailable),
            i if i == ErrorCode::MemberIdRequired as i16 => Ok(ErrorCode::MemberIdRequired),
            i if i == ErrorCode::PreferredLeaderNotAvailable as i16 => Ok(ErrorCode::PreferredLeaderNotAvailable),
            i if i == ErrorCode::GroupMaxSizeReached as i16 => Ok(ErrorCode::GroupMaxSizeReached),
            i if i == ErrorCode::FencedInstanceId as i16 => Ok(ErrorCode::FencedInstanceId),
            i if i == ErrorCode::EligibleLeadersNotAvailable as i16 => Ok(ErrorCode::EligibleLeadersNotAvailable),
            i if i == ErrorCode::ElectionNotNeeded as i16 => Ok(ErrorCode::ElectionNotNeeded),
            i if i == ErrorCode::NoReassignmentInProgress as i16 => Ok(ErrorCode::NoReassignmentInProgress),
            i if i == ErrorCode::GroupSubscribedToTopic as i16 => Ok(ErrorCode::GroupSubscribedToTopic),
            i if i == ErrorCode::InvalidRecord as i16 => Ok(ErrorCode::InvalidRecord),
            i if i == ErrorCode::UnstableOffsetCommit as i16 => Ok(ErrorCode::UnstableOffsetCommit),
            i if i == ErrorCode::ThrottlingQuotaExceeded as i16 => Ok(ErrorCode::ThrottlingQuotaExceeded),
            i if i == ErrorCode::ProducerFenced as i16 => Ok(ErrorCode::ProducerFenced),
            i if i == ErrorCode::ResourceNotFound as i16 => Ok(ErrorCode::ResourceNotFound),
            i if i == ErrorCode::DuplicateResource as i16 => Ok(ErrorCode::DuplicateResource),
            i if i == ErrorCode::UnacceptableCredential as i16 => Ok(ErrorCode::UnacceptableCredential),
            i if i == ErrorCode::InconsistentVoterSet as i16 => Ok(ErrorCode::InconsistentVoterSet),
            i if i == ErrorCode::InvalidUpdateVersion as i16 => Ok(ErrorCode::InvalidUpdateVersion),
            i if i == ErrorCode::FeatureUpdateFailed as i16 => Ok(ErrorCode::FeatureUpdateFailed),
            i if i == ErrorCode::PrincipalDeserializationFailure as i16 => Ok(ErrorCode::PrincipalDeserializationFailure),
            i if i == ErrorCode::SnapshotNotFound as i16 => Ok(ErrorCode::SnapshotNotFound),
            i if i == ErrorCode::PositionOutOfRange as i16 => Ok(ErrorCode::PositionOutOfRange),
            i if i == ErrorCode::UnknownTopicId as i16 => Ok(ErrorCode::UnknownTopicId),
            i if i == ErrorCode::DuplicateBrokerRegistration as i16 => Ok(ErrorCode::DuplicateBrokerRegistration),
            i if i == ErrorCode::BrokerIdNotRegistered as i16 => Ok(ErrorCode::BrokerIdNotRegistered),
            i if i == ErrorCode::InconsistentTopicId as i16 => Ok(ErrorCode::InconsistentTopicId),
            i if i == ErrorCode::InconsistentClusterId as i16 => Ok(ErrorCode::InconsistentClusterId),
            i if i == ErrorCode::TransactionalIdNotFound as i16 => Ok(ErrorCode::TransactionalIdNotFound),
            i if i == ErrorCode::FetchSessionTopicIdError as i16 => Ok(ErrorCode::FetchSessionTopicIdError),
            i if i == ErrorCode::IneligibleReplica as i16 => Ok(ErrorCode::IneligibleReplica),
            i if i == ErrorCode::NewLeaderElected as i16 => Ok(ErrorCode::NewLeaderElected),
            _ => Err(std::io::Error::from(ErrorKind::InvalidData))
        }
    }
}

impl KafkaEncodable for ErrorCode {
    fn to_kafka_bytes<W: Write>(self, write_buffer: &mut W) -> std::io::Result<()> {
        (self as i16).to_kafka_bytes(write_buffer)
    }
}

impl KafkaDecodable for ErrorCode {
    fn from_kafka_bytes<R: Read>(read_buffer: &mut R) -> std::io::Result<Self> {
        let code: i16 = i16::from_kafka_bytes(read_buffer)?;
        ErrorCode::try_from(code)
    }
}
